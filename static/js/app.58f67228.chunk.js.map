{"version":3,"sources":["src/utils/env.js","src/preferences/context.js","src/preferences/usePreferences.js","src/utils/DarkModeSwitch.js","src/utils/GeneralMenu.js","src/screens/Contacts.js","src/screens/Home.js","src/screens/About.js","src/utils/APIClient.js","src/screens/ScheduleSelector.js","src/screens/ScheduleView.js","src/screens/TwitterFeed.js","src/navigation/StackNavigator.js","src/navigation/TabNavigator.js","src/navigation/DrawerNavigator.js","App.js"],"names":["API_URL","releaseChannel","Constants","manifest","undefined","indexOf","PreferencesContext","React","createContext","usePreferences","useContext","isThemeDark","setIsThemeDark","isHidingUnselected","setHideUnselected","toggleTheme","toggleHideSelected","DarkModeSwitch","props","theme","useTheme","View","style","flex","flexDirection","alignItems","justifyContent","color","colors","text","Switch","onValueChange","value","GeneralMenu","useState","visible","setVisible","menuButton","ToggleButton","mode","onPress","icon","Menu","onDismiss","anchor","statusBarHeight","styles","StyleSheet","create","center","textAlign","Contact","Text","instance","axios","baseURL","env","timeout","get","post","delete","put","patch","ScheduleSelector","navigation","schedules","setSchedules","refreshing","setRefreshing","retrieveData","a","async","APIClient","data","console","log","onRefresh","useEffect","Surface","flexGrow","ScrollView","refreshControl","RefreshControl","contentContainerStyle","padding","margin","ActivityIndicator","size","map","item","index","key","_id","navigate","routeId","routeName","require","CustomRow","selected","backgroundColor","hour","hourIndex","tableElement","alignContent","primaryLight","primary","columnAccent","ScheduleView","scale","Animated","Value","onZoomEvent","event","nativeEvent","useNativeDriver","onZoomStateChange","oldState","State","ACTIVE","spring","toValue","start","state","schedule","selectedColumn","scheduleScale","selectedColumns","this","retrieveSchedule","then","externalData","setState","route","params","ind","temp","splice","prevState","scheduleData","isFetching","Dimensions","height","primaryDark","fontSize","Consumer","horizontal","stops","stop","stopIndex","selectColumn","textAlignVertical","includes","width","length","hours","hoursIndex","id","TouchableOpacity","activeOpacity","flexShrink","flexBasis","flexWrap","showsVerticalScrollIndicator","Component","container","paddingTop","HeadStyle","TableText","alignSelf","withTheme","TwitterFeed","source","uri","Stack","createStackNavigator","ContactStackNavigator","Navigator","screenOptions","TransitionPresets","SlideFromRightIOS","headerStyle","headerRight","Screen","name","component","TwitterNavigator","options","headerLeft","toggleDrawer","ScheduleNavigator","createBottomTabNavigator","Drawer","createDrawerNavigator","CustomDrawerContent","DrawerNavigator","dimensions","useWindowDimensions","drawerType","edgeWidth","drawerContent","CombinedDefaultTheme","PaperDefaultTheme","NavigationDefaultTheme","dark","background","accent","surface","card","CombinedDarkTheme","PaperDarkTheme","NavigationDarkTheme","App","Provider","NavigationContainer","StatusBar","barStyle"],"mappings":"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","file":"static/js/app.58f67228.chunk.js","sourcesContent":["import Constants from 'expo-constants';\r\n\r\nlet API_URL;\r\n\r\nconst releaseChannel = Constants.manifest.releaseChannel;\r\n\r\nif (releaseChannel === undefined) {\r\n  API_URL = process.env.API_URL;\r\n} else if (releaseChannel.indexOf('production') !== -1) {\r\n  API_URL = process.env.PRODUCTION_API_URL;\r\n}\r\n\r\nAPI_URL = 'https://buschedule-api.herokuapp.com';\r\n\r\nexport default {\r\n  API_URL,\r\n};\r\n","import React from 'react';\r\n\r\nconst PreferencesContext = React.createContext();\r\n\r\nexport const withPreferences = WrappedComponent => {\r\n  return () => {\r\n    const context = useContext(PreferencesContext);\r\n    return <WrappedComponent {...context} />;\r\n  };\r\n};\r\n\r\nexport default PreferencesContext;\r\n","import { useContext } from 'react';\r\n\r\nimport PreferencesContext from './context';\r\n\r\nexport default function usePreferences() {\r\n  const {\r\n    isThemeDark,\r\n    setIsThemeDark,\r\n    isHidingUnselected,\r\n    setHideUnselected,\r\n  } = useContext(PreferencesContext);\r\n\r\n  const toggleTheme = () => setIsThemeDark(!isThemeDark);\r\n  const toggleHideSelected = () => setHideUnselected(!isHidingUnselected);\r\n\r\n  return {\r\n    isThemeDark,\r\n    setIsThemeDark,\r\n    toggleTheme,\r\n    isHidingUnselected,\r\n    setHideUnselected,\r\n    toggleHideSelected,\r\n  };\r\n}\r\n","import React from 'react';\r\nimport { View, Button } from 'react-native';\r\nimport {\r\n  useTheme,\r\n  Appbar,\r\n  TouchableRipple,\r\n  Switch,\r\n  Text,\r\n} from 'react-native-paper';\r\n\r\nimport usePreferences from '../preferences/usePreferences';\r\n\r\nfunction DarkModeSwitch(props) {\r\n  const theme = useTheme();\r\n  const { isThemeDark, toggleTheme } = usePreferences();\r\n  return (\r\n    <View\r\n      style={{\r\n        flex: 1,\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      }}\r\n    >\r\n      <Text style={{ color: theme?.colors.text }}>Dark Mode</Text>\r\n      {/* <TouchableRipple > */}\r\n      <Switch\r\n        onValueChange={() => toggleTheme()}\r\n        color={'red'}\r\n        value={isThemeDark}\r\n      ></Switch>\r\n\r\n      {/* </TouchableRipple> */}\r\n    </View>\r\n  );\r\n}\r\n\r\n// <View style={{ flex: 1, flexDirection: 'row', alignItems: 'center', justifyContent: 'center' }}>\r\n//   <Text>Dark Mode</Text>\r\n//   <Button title=\"test\" onPress={() => { toggleTheme; console.log(\"e\") }}>\r\n//   </Button>\r\n// </View >\r\n\r\nexport { DarkModeSwitch };\r\n","import React from 'react';\r\nimport { View } from 'react-native';\r\nimport {\r\n  useTheme,\r\n  Menu,\r\n  Text,\r\n  ToggleButton,\r\n  Surface,\r\n  Switch,\r\n} from 'react-native-paper';\r\nimport { DarkModeSwitch } from '../utils/DarkModeSwitch';\r\n\r\nimport usePreferences from '../preferences/usePreferences';\r\n\r\n// const MenuWindow = () => {\r\n//   return(\r\n\r\n//   )\r\n// }\r\n\r\nconst GeneralMenu = () => {\r\n  const theme = useTheme();\r\n  const { isThemeDark, toggleTheme, isHidingUnselected, toggleHideSelected } =\r\n    usePreferences();\r\n\r\n  const [visible, setVisible] = React.useState(false);\r\n  const openMenu = () => setVisible(true);\r\n  const closeMenu = () => setVisible(false);\r\n\r\n  const menuButton = (\r\n    <ToggleButton mode=\"contained\" onPress={openMenu} icon=\"dots-vertical\" />\r\n  );\r\n  return (\r\n    <View\r\n      style={{\r\n        flex: 1,\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      }}\r\n    >\r\n      <Menu\r\n        visible={visible}\r\n        onDismiss={closeMenu}\r\n        anchor={menuButton}\r\n        statusBarHeight={60}\r\n      >\r\n        <DarkModeSwitch />\r\n        <View\r\n          style={{\r\n            flex: 1,\r\n            flexDirection: 'row',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n          }}\r\n        >\r\n          <Text style={{ color: theme?.colors.text }}>Filter Mode</Text>\r\n          <Switch\r\n            onValueChange={() => toggleHideSelected()}\r\n            color={'red'}\r\n            value={isHidingUnselected}\r\n          ></Switch>\r\n        </View>\r\n        {/* <Menu.Item onPress={() => { toggleTheme() }} title=\"Toggle Dark/Light theme\" /> */}\r\n      </Menu>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default GeneralMenu;\r\n","// ./screens/Contact.js\r\n\r\nimport React from \"react\";\r\nimport { View, StyleSheet, Text } from \"react-native\";\r\n\r\nconst Contact = () => {\r\n  return (\r\n    <View style={styles.center}>\r\n      <Text>This is the contact screen</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  center: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    textAlign: \"center\",\r\n  },\r\n});\r\n\r\nexport default Contact;","// ./screens/Home.js\r\n\r\nimport React from 'react';\r\nimport { View, Button, Text, StyleSheet } from 'react-native';\r\nimport { Surface } from 'react-native-paper';\r\nimport Header from '../navigation/Header';\r\nimport GeneralMenu from '../utils/GeneralMenu';\r\n\r\nconst Home = ({ navigation }) => {\r\n  return (\r\n    <Surface style={styles.center}>\r\n      <Text>This is the home screen</Text>\r\n      <Button\r\n        title=\"Go to About Screen\"\r\n        onPress={() => navigation.navigate('About')}\r\n      />\r\n      {/* <Header></Header> */}\r\n    </Surface>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  center: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    textAlign: 'center',\r\n  },\r\n});\r\n\r\nexport default Home;\r\n","// ./screens/About.js\r\n\r\nimport React from \"react\";\r\nimport { View, StyleSheet, Text } from \"react-native\";\r\n\r\nconst About = () => {\r\n  return (\r\n    <View style={styles.center}>\r\n      <Text>This is the about screen</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  center: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    textAlign: \"center\",\r\n  },\r\n});\r\n\r\nexport default About;","import axios from 'axios';\r\n\r\nimport env from './env';\r\n\r\nconst instance = axios.create({\r\n  baseURL: env.API_URL,\r\n  timeout: 4000,\r\n});\r\n\r\nexport default {\r\n  get: instance.get,\r\n  post: instance.post,\r\n  delete: instance.delete,\r\n  put: instance.put,\r\n  patch: instance.patch,\r\n};\r\n","// ./screens/About.js\r\n\r\nimport { ThemeProvider } from '@react-navigation/native';\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  View,\r\n  StyleSheet,\r\n  Text,\r\n  RefreshControl,\r\n  ScrollView,\r\n} from 'react-native';\r\n// import {  } from \"react-native-gesture-handler\";\r\nimport {\r\n  Button,\r\n  useTheme,\r\n  Surface,\r\n  ActivityIndicator,\r\n} from 'react-native-paper';\r\nimport APIClient from '../utils/APIClient';\r\n\r\nconst ScheduleSelector = ({ navigation }) => {\r\n  const theme = useTheme();\r\n  const [schedules, setSchedules] = useState([]);\r\n  const [refreshing, setRefreshing] = useState(false);\r\n\r\n  const retrieveData = async () => {\r\n    try {\r\n      const { data } = await APIClient.get('/schedules/names');\r\n      setSchedules(data);\r\n      console.log(data);\r\n    } catch (ex) {\r\n      console.log(ex);\r\n      console.log({ ...ex });\r\n    }\r\n  };\r\n\r\n  const onRefresh = () => {\r\n    retrieveData();\r\n    setRefreshing(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    retrieveData();\r\n  }, []);\r\n\r\n  // const generateRouteButtons = () => {\r\n  //   const routeButtons = [];\r\n  //   for (const e in schedules) {\r\n  //     routeButtons.push(<Button title={e.routeName}></Button>)\r\n  //   }\r\n  //   return routeButtons;\r\n  // }\r\n  return (\r\n    <Surface style={{ flexGrow: 1, flexDirection: 'column' }}>\r\n      {/* <Text>{JSON.stringify(schedules)}</Text> */}\r\n      {/* <Text>This is the selection screen</Text> */}\r\n      {/* {console.log(generateRouteButtons())} */}\r\n      <ScrollView\r\n        refreshControl={\r\n          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\r\n        }\r\n        contentContainerStyle={{\r\n          flex: 1,\r\n          flexDirection: 'column',\r\n          padding: 10,\r\n        }}\r\n      >\r\n        <Button\r\n          mode=\"contained\"\r\n          style={{ margin: 2 }}\r\n          onPress={() => onRefresh()}\r\n        >\r\n          Refresh\r\n        </Button>\r\n        {refreshing ? <ActivityIndicator size=\"large\" /> : <Text></Text>}\r\n\r\n        {schedules.map((item, index) => {\r\n          return (\r\n            <Button /*style={{ backgroundColor: theme?.colors.accent }}*/\r\n              key={item._id}\r\n              mode=\"contained\"\r\n              onPress={() =>\r\n                navigation.navigate('Schedule Viewer', {\r\n                  routeId: item._id,\r\n                  routeName: item.routeName,\r\n                })\r\n              }\r\n              style={{ margin: 2 }}\r\n            >\r\n              {item.routeName}\r\n            </Button>\r\n          );\r\n        })}\r\n        {/* <Button key={2} mode=\"contained\" title=\"Go to About Screen\" onPress={() => navigation.navigate(\"Schedule Viewer\")} /> */}\r\n      </ScrollView>\r\n    </Surface>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  center: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    textAlign: 'center',\r\n  },\r\n});\r\n\r\nexport default ScheduleSelector;\r\n","// ./screens/About.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Dimensions,\r\n  View,\r\n  StyleSheet,\r\n  Button,\r\n  VirtualizedList,\r\n  FlatList,\r\n  Image,\r\n  Animated,\r\n  ScrollView,\r\n  TouchableOpacity,\r\n  TouchableHighlight,\r\n} from 'react-native';\r\nimport {\r\n  Surface,\r\n  DataTable,\r\n  Text,\r\n  useTheme,\r\n  withTheme,\r\n  ActivityIndicator,\r\n} from 'react-native-paper';\r\nimport { back } from 'react-native/Libraries/Animated/src/Easing';\r\nimport APIClient from '../utils/APIClient';\r\n\r\n// import {\r\n//   Table,\r\n//   TableWrapper,\r\n//   Row,\r\n//   Rows,\r\n//   Col,\r\n//   Cols,\r\n//   Cell,\r\n// } from 'react-native-table-component';\r\n\r\nimport { PinchGestureHandler, State } from 'react-native-gesture-handler';\r\nvar classNames = require('classnames');\r\nimport usePreferences from '../preferences/usePreferences';\r\nimport PreferencesContext from '../preferences/context';\r\n\r\nconst ScheduleTableRow = ({ item, index, selectedColumns }) => {\r\n  const theme = useTheme();\r\n  return (\r\n    // <Text>e</Text>\r\n\r\n    <DataTable.Row\r\n      key={index}\r\n      style={\r\n        index % 2 == 0\r\n          ? { backgroundColor: theme?.colors.primaryLight }\r\n          : { backgroundColor: theme?.colors.accent }\r\n      }\r\n    >\r\n      {item.map((item2, index2) => {\r\n        return (\r\n          <DataTable.Cell\r\n            style={[\r\n              { ...styles.TableText },\r\n              // index2 == this.state.selectedColumn\r\n              selectedColumns.includes(index2)\r\n                ? {\r\n                    backgroundColor: theme?.colors.columnAccent,\r\n                    opacity: 0.8,\r\n                  }\r\n                : {},\r\n            ]}\r\n            key={index * 100 + index2}\r\n          >\r\n            {item2}\r\n          </DataTable.Cell>\r\n        );\r\n      })}\r\n    </DataTable.Row>\r\n  );\r\n};\r\n\r\nconst CustomRow = ({ item, index, selected }) => {\r\n  const theme = useTheme();\r\n  const { isHidingUnselected, toggleHideSelected } = usePreferences();\r\n  return (\r\n    <Surface\r\n      style={{\r\n        flex: 1,\r\n        textAlign: 'center',\r\n        // justifyContent: 'center',\r\n        // alignContent: 'center',\r\n        //backgroundColor: theme?.colors.primary,\r\n        backgroundColor: 'yellow',\r\n        // width: 30,\r\n        flexDirection: 'column',\r\n        // justifyContent: 'center',  PREVIOUS\r\n\r\n        // alignItems: 'stretch',\r\n        // width: 0,\r\n        // margin: 10,\r\n        // flexGrow: 2,\r\n        // flexWrap: 'wrap',\r\n      }}\r\n    >\r\n      {item.map((hour, hourIndex) => {\r\n        // if (hourIndex < 3)\r\n        return (\r\n          <Text\r\n            key={index * 10 + hourIndex}\r\n            style={[\r\n              {\r\n                ...styles.tableElement,\r\n                flexGrow: 1,\r\n                textAlign: 'center',\r\n                // margin: 3,\r\n                // minHeight: 100,\r\n                padding: 10,\r\n\r\n                // width: 100,\r\n                // backgroundColor: 'red',\r\n                alignContent: 'center',\r\n                // minHeight: 10,\r\n              },\r\n              isHidingUnselected\r\n                ? hourIndex % 2\r\n                  ? { backgroundColor: theme?.colors.primaryLight }\r\n                  : { backgroundColor: theme?.colors.primary }\r\n                : selected\r\n                ? { backgroundColor: theme?.colors.columnAccent }\r\n                : hourIndex % 2\r\n                ? { backgroundColor: theme?.colors.primaryLight }\r\n                : { backgroundColor: theme?.colors.primary },\r\n            ]}\r\n          >\r\n            {hour != '' ? hour : '-'}\r\n          </Text>\r\n        );\r\n      })}\r\n    </Surface>\r\n  );\r\n};\r\n\r\nclass ScheduleView extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      schedule: null,\r\n      selectedColumn: null,\r\n      scheduleScale: 1,\r\n      selectedColumns: [],\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    // console.log(\"mounted\")\r\n    this.retrieveSchedule().then(externalData => {\r\n      this.setState({ schedule: externalData[0] });\r\n    });\r\n  }\r\n  async retrieveSchedule() {\r\n    try {\r\n      const { routeId } = this.props.route.params;\r\n      const { data } = await APIClient.get('/schedules/' + routeId);\r\n      // this.setState({ schedule: data[0] })\r\n      return data;\r\n    } catch (ex) {\r\n      console.log(ex);\r\n    }\r\n  }\r\n  componentDidUpdate() {\r\n    console.log(this.state.selectedColumns);\r\n  }\r\n  // selectColumn(index) {\r\n  //   if (index == this.state.selectedColumn) {\r\n  //     this.setState({ selectedColumn: null });\r\n  //   } else {\r\n  //     this.setState({ selectedColumn: index });\r\n  //   }\r\n  //   console.log(index);\r\n  // }\r\n  selectColumn(index) {\r\n    // if (index == this.state.selectedColumn) {\r\n    //   this.setState({ selectedColumn: null });\r\n    // } else {\r\n    //   this.setState({ selectedColumn: index });\r\n    // }\r\n    console.log('Selected ' + index);\r\n    var ind = this.state.selectedColumns.indexOf(index);\r\n    console.log('index = ' + ind);\r\n    if (ind !== -1) {\r\n      var temp = this.state.selectedColumns;\r\n      temp.splice(ind, 1);\r\n      console.log('temp = ' + temp);\r\n      this.setState(prevState => ({\r\n        selectedColumns: temp,\r\n      }));\r\n    } else {\r\n      this.setState(prevState => ({\r\n        selectedColumns: [...prevState.selectedColumns, index],\r\n      }));\r\n    }\r\n\r\n    // console.log(index);\r\n  }\r\n\r\n  scale = new Animated.Value(1);\r\n  onZoomEvent = Animated.event(\r\n    [\r\n      {\r\n        nativeEvent: { scale: this.scale },\r\n      },\r\n    ],\r\n    {\r\n      useNativeDriver: true,\r\n    }\r\n  );\r\n  onZoomStateChange = event => {\r\n    if (event.nativeEvent.oldState === State.ACTIVE) {\r\n      Animated.spring(this.scale, {\r\n        toValue: 1,\r\n        useNativeDriver: true,\r\n      }).start();\r\n    }\r\n  };\r\n\r\n  // render() {\r\n  //   // this.retrieveSchedule()\r\n  //   const scheduleData = this.state.schedule;\r\n  //   const isFetching = scheduleData === null;\r\n  //   const { theme } = this.props;\r\n  //   return (\r\n  //     <Surface style={styles.center}>\r\n  //       {isFetching ? (\r\n  //         // <Text>loading</Text>\r\n  //         <ActivityIndicator size=\"large\" />\r\n  //       ) : (\r\n  //         <PinchGestureHandler\r\n  //           onGestureEvent={() => {\r\n  //             this.onZoomEvent;\r\n  //             console.log(this.scale);\r\n  //           }}\r\n  //           onHandlerStateChange={this.onZoomStateChange}\r\n  //         >\r\n  //           <View>\r\n  //             <Animated.Image\r\n  //               style={{ transform: [{ scale: this.scale }] }}\r\n  //               source={require('../../assets/icon.png')}\r\n  //             ></Animated.Image>\r\n  //           </View>\r\n  //         </PinchGestureHandler>\r\n  //       )}\r\n  //     </Surface>\r\n  //   );\r\n  // }\r\n\r\n  render() {\r\n    // this.retrieveSchedule()\r\n    const scheduleData = this.state.schedule;\r\n    const isFetching = scheduleData === null;\r\n    const { theme } = this.props;\r\n    let screenHeight = Dimensions.get('window').height;\r\n    return (\r\n      // <Surface style={styles.center}>\r\n      <Surface\r\n        style={{\r\n          flex: 1,\r\n          // flexDirection: 'row',\r\n          // justifyContent: 'flex-end',\r\n          // alignItems: 'center',\r\n          // textAlign: 'center',\r\n        }}\r\n      >\r\n        {isFetching ? (\r\n          // <Text>loading</Text>\r\n          <ActivityIndicator size=\"large\" />\r\n        ) : (\r\n          <Surface style={{ flex: 1, justifyContent: 'center' }}>\r\n            <Surface\r\n              style={{\r\n                backgroundColor: theme?.colors.primaryDark,\r\n                alignContent: 'center',\r\n              }}\r\n            >\r\n              <Text\r\n                style={{\r\n                  textAlign: 'center',\r\n                  fontSize: 20,\r\n                }}\r\n              >\r\n                {scheduleData.routeName}\r\n              </Text>\r\n            </Surface>\r\n\r\n            <PreferencesContext.Consumer>\r\n              {({ isHidingUnselected, toggleHideSelected }) =>\r\n                !isHidingUnselected ? (\r\n                  <View\r\n                    style={{\r\n                      flex: 1,\r\n                    }}\r\n                  >\r\n                    <ScrollView\r\n                      horizontal\r\n                      contentContainerStyle={{\r\n                        flexGrow: 1,\r\n                        alignContent: 'center',\r\n                      }}\r\n                    >\r\n                      <View style={{ flex: 1 }} id=\"horizontalContainer\">\r\n                        <View\r\n                          id=\"stopNameRow\"\r\n                          style={{\r\n                            flex: 1,\r\n\r\n                            flexDirection: 'row',\r\n                            // alignItems: 'stretch',\r\n                            justifyContent: 'space-between',\r\n                          }}\r\n                        >\r\n                          {scheduleData.stops.map((stop, stopIndex) => {\r\n                            return (\r\n                              <TouchableOpacity\r\n                                activeOpacity={1}\r\n                                onPress={() => this.selectColumn(stopIndex)}\r\n                                style={[\r\n                                  {\r\n                                    flex: 1,\r\n                                    flexGrow: 1,\r\n                                    flexShrink: 1,\r\n                                    flexBasis: 0,\r\n                                    flexWrap: 'wrap',\r\n\r\n                                    // flex: 1,\r\n                                    // alignContent: 'center',\r\n                                    // flexDirection: 'row',\r\n                                    justifyContent: 'center', //Centered horizontally\r\n                                    alignItems: 'center', //Centered vertically\r\n                                  },\r\n                                  this.state.selectedColumns.includes(stopIndex)\r\n                                    ? {\r\n                                        backgroundColor:\r\n                                          theme?.colors.columnAccent,\r\n                                      }\r\n                                    : {},\r\n                                ]}\r\n                                key={stopIndex}\r\n                              >\r\n                                <Text>{stop}</Text>\r\n                              </TouchableOpacity>\r\n                            );\r\n                          })}\r\n                        </View>\r\n                        <View\r\n                          style={{\r\n                            flex: 15,\r\n                          }}\r\n                        >\r\n                          <ScrollView\r\n                            style={{}}\r\n                            showsVerticalScrollIndicator={false}\r\n                            contentContainerStyle={{\r\n                              height: 0,\r\n                              flexDirection: 'row',\r\n                            }}\r\n                          >\r\n                            {scheduleData.hours.map((hours, hoursIndex) => {\r\n                              if (isHidingUnselected) {\r\n                                if (\r\n                                  this.state.selectedColumns.includes(\r\n                                    hoursIndex\r\n                                  )\r\n                                )\r\n                                  return (\r\n                                    <CustomRow\r\n                                      key={hoursIndex}\r\n                                      index={hoursIndex}\r\n                                      item={hours}\r\n                                      // selectedColumns={this.state.selectedColumns}\r\n                                      selected={this.state.selectedColumns.includes(\r\n                                        hoursIndex\r\n                                      )}\r\n                                    />\r\n                                  );\r\n                              } else {\r\n                                return (\r\n                                  <CustomRow\r\n                                    key={hoursIndex}\r\n                                    index={hoursIndex}\r\n                                    item={hours}\r\n                                    // selectedColumns={this.state.selectedColumns}\r\n                                    selected={this.state.selectedColumns.includes(\r\n                                      hoursIndex\r\n                                    )}\r\n                                  />\r\n                                );\r\n                              }\r\n                            })}\r\n                          </ScrollView>\r\n                        </View>\r\n                      </View>\r\n                    </ScrollView>\r\n                  </View>\r\n                ) : (\r\n                  //   </View>\r\n                  // </View>\r\n                  <Surface>\r\n                    <ScrollView horizontal>\r\n                      <Surface\r\n                        style={{\r\n                          flex: 1,\r\n                          flexDirection: 'row',\r\n                          // justifyContent: 'center',\r\n                          justifyContent: 'space-around',\r\n                          // alignContent: 'center',\r\n                          // alignContent: 'space-around',\r\n                          backgroundColor: 'black',\r\n                          alignItems: 'stretch',\r\n                          // width: 1000,\r\n                          height: 60,\r\n                        }}\r\n                      >\r\n                        {scheduleData.stops.map((stop, stopIndex) => {\r\n                          return (\r\n                            <Text\r\n                              onPress={() => this.selectColumn(stopIndex)}\r\n                              style={[\r\n                                {\r\n                                  // flex: 1, padding: 7\r\n                                  // ...styles.TableText,\r\n                                  ...styles.tableElement,\r\n                                  // alignSelf: 'center',\r\n                                  textAlign: 'center',\r\n                                  textAlignVertical: 'center',\r\n                                  flex: 1,\r\n                                },\r\n                                this.state.selectedColumns.includes(stopIndex)\r\n                                  ? {\r\n                                      backgroundColor:\r\n                                        theme?.colors.columnAccent,\r\n                                    }\r\n                                  : {},\r\n                              ]}\r\n                              key={stopIndex}\r\n                            >\r\n                              {stop}\r\n                            </Text>\r\n                          );\r\n                        })}\r\n                      </Surface>\r\n                    </ScrollView>\r\n                    <ScrollView horizontal>\r\n                      <ScrollView>\r\n                        <Surface\r\n                          style={[\r\n                            {\r\n                              flex: 1,\r\n                              flexDirection: 'row',\r\n                              justifyContent: 'center',\r\n                            },\r\n                            Dimensions.get('window').width <\r\n                            styles.tableElement.width *\r\n                              this.state.selectedColumns.length\r\n                              ? { backgroundColor: 'green' }\r\n                              : { width: Dimensions.get('window').width },\r\n                          ]}\r\n                        >\r\n                          {scheduleData.hours.map((hours, hoursIndex) => {\r\n                            if (this.state.selectedColumns.includes(hoursIndex))\r\n                              return (\r\n                                <Surface>\r\n                                  <Text\r\n                                    style={[\r\n                                      {\r\n                                        // flex: 1, padding: 7\r\n                                        // ...styles.TableText,\r\n                                        ...styles.tableElement,\r\n                                        // alignSelf: 'center',\r\n                                        textAlign: 'center',\r\n                                        textAlignVertical: 'center',\r\n                                        flex: 1,\r\n                                        height: 40,\r\n                                      },\r\n                                    ]}\r\n                                    key={hoursIndex * 20 + 1}\r\n                                    onPress={() =>\r\n                                      this.selectColumn(hoursIndex)\r\n                                    }\r\n                                  >\r\n                                    {scheduleData.stops[hoursIndex]}\r\n                                  </Text>\r\n                                  <CustomRow\r\n                                    key={hoursIndex}\r\n                                    index={hoursIndex}\r\n                                    item={hours}\r\n                                    // selectedColumns={this.state.selectedColumns}\r\n                                    selected={this.state.selectedColumns.includes(\r\n                                      hoursIndex\r\n                                    )}\r\n                                  />\r\n                                </Surface>\r\n                              );\r\n                          })}\r\n                        </Surface>\r\n                      </ScrollView>\r\n                    </ScrollView>\r\n                  </Surface>\r\n                )\r\n              }\r\n            </PreferencesContext.Consumer>\r\n          </Surface>\r\n        )}\r\n      </Surface>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  tableElement: {\r\n    width: 100,\r\n  },\r\n  center: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    textAlign: 'center',\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    // display: flex,\r\n    padding: 18,\r\n    paddingTop: 35,\r\n    // backgroundColor: '#ffffff'\r\n    // alignItems: 'center'\r\n    justifyContent: 'space-around',\r\n  },\r\n  HeadStyle: {\r\n    height: 50,\r\n    alignContent: 'center',\r\n    // backgroundColor: '#ffe0f0'\r\n  },\r\n  TableText: {\r\n    // margin: 10,\r\n    flex: 1,\r\n    textAlign: 'center',\r\n    // textAlignVertical: 'center',\r\n    // justifyContent: 'center',\r\n    // alignContent: 'center',\r\n    // alignItems: 'center',\r\n    alignSelf: 'center',\r\n    width: 100,\r\n    // flexGrow: 2,\r\n    // flexWrap: 'wrap',\r\n  },\r\n});\r\nexport default withTheme(ScheduleView);\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Text, View, Surface } from 'react-native-paper';\r\nimport { WebView } from 'react-native-webview';\r\nclass TwitterFeed extends React.Component {\r\n  render() {\r\n    return <WebView source={{ uri: 'https://twitter.com/BusGarraf' }} />;\r\n  }\r\n}\r\n\r\nexport default TwitterFeed;\r\n","// ./navigation/StackNavigator.js\r\n\r\nimport React from 'react';\r\nimport {\r\n  createStackNavigator,\r\n  TransitionPresets,\r\n} from '@react-navigation/stack';\r\n\r\nimport Home from '../screens/Home';\r\nimport About from '../screens/About';\r\nimport Contact from '../screens/Contacts';\r\nimport ScheduleSelector from '../screens/ScheduleSelector';\r\nimport ScheduleView from '../screens/ScheduleView';\r\nimport TwitterFeed from '../screens/TwitterFeed';\r\nimport {\r\n  Switch,\r\n  useTheme,\r\n  Appbar,\r\n  TouchableRipple,\r\n  ToggleButton,\r\n  Button,\r\n} from 'react-native-paper';\r\nimport { Text, View } from 'react-native';\r\n// import PreferencesContext from '../PreferencesContext';\r\nimport { DarkModeSwitch as DKSwitch } from '../utils/DarkModeSwitch';\r\nimport GeneralMenu from '../utils/GeneralMenu';\r\nconst Stack = createStackNavigator();\r\n\r\nconst MainStackNavigator = ({ scene }) => {\r\n  const theme = useTheme();\r\n  // const { toggleTheme, isThemeDark } = React.useContext(PreferencesContext);\r\n\r\n  const ScreenOptions = {\r\n    // ...TransitionPresets.SlideFromRightIOS, // This is where the transition happens\r\n    // headerStyle: {\r\n    //   backgroundColor: '#f4511e'\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <Stack.Navigator\r\n      screenOptions={{\r\n        ...TransitionPresets.SlideFromRightIOS,\r\n        headerStyle: {\r\n          backgroundColor: theme?.colors.primary,\r\n        },\r\n        headerRight: () => <GeneralMenu />,\r\n      }}\r\n    >\r\n      <Stack.Screen name=\"Home\" component={Home} />\r\n      <Stack.Screen name=\"About\" component={About} />\r\n    </Stack.Navigator>\r\n  );\r\n};\r\n\r\nconst ContactStackNavigator = () => {\r\n  return (\r\n    // <Stack.Navigator screenOptions={ScreenOptions}>\r\n    <Stack.Navigator\r\n      screenOptions={{\r\n        ...TransitionPresets.SlideFromRightIOS,\r\n        headerStyle: {\r\n          backgroundColor: theme?.colors.primary,\r\n        },\r\n        headerRight: () => <DKSwitch />,\r\n      }}\r\n    >\r\n      <Stack.Screen name=\"Contact\" component={Contact} />\r\n    </Stack.Navigator>\r\n  );\r\n};\r\n\r\nconst TwitterNavigator = ({ navigation }) => {\r\n  const theme = useTheme();\r\n  return (\r\n    <Stack.Navigator\r\n      screenOptions={{\r\n        ...TransitionPresets.SlideFromRightIOS,\r\n        headerStyle: {\r\n          backgroundColor: theme?.colors.primary,\r\n        },\r\n        headerRight: () => <GeneralMenu />,\r\n      }}\r\n    >\r\n      <Stack.Screen\r\n        name=\"View Tweets\"\r\n        component={TwitterFeed}\r\n        options={{\r\n          headerRight: () => <DKSwitch />,\r\n          headerLeft: () => (\r\n            <ToggleButton\r\n              mode=\"contained\"\r\n              icon=\"menu\"\r\n              onPress={() => navigation.toggleDrawer()}\r\n            />\r\n          ),\r\n        }}\r\n      />\r\n    </Stack.Navigator>\r\n  );\r\n};\r\n\r\nconst ScheduleNavigator = ({ navigation }) => {\r\n  const theme = useTheme();\r\n  return (\r\n    <Stack.Navigator\r\n      screenOptions={{\r\n        ...TransitionPresets.SlideFromRightIOS,\r\n        headerStyle: {\r\n          backgroundColor: theme?.colors.primary,\r\n        },\r\n        headerRight: () => <GeneralMenu />,\r\n      }}\r\n    >\r\n      <Stack.Screen\r\n        name=\"Select Schedule\"\r\n        component={ScheduleSelector}\r\n        options={{\r\n          headerRight: () => <DKSwitch />,\r\n          headerLeft: () => (\r\n            <ToggleButton\r\n              mode=\"contained\"\r\n              icon=\"menu\"\r\n              onPress={() => navigation.toggleDrawer()}\r\n            />\r\n          ),\r\n        }}\r\n      />\r\n      <Stack.Screen\r\n        name=\"Schedule Viewer\"\r\n        component={ScheduleView}\r\n        // options={({ route }) => ({ title: route.params.routeName })}\r\n      />\r\n    </Stack.Navigator>\r\n  );\r\n};\r\n\r\nexport {\r\n  MainStackNavigator,\r\n  ContactStackNavigator,\r\n  ScheduleNavigator,\r\n  TwitterNavigator,\r\n};\r\n","// ./navigation/TabNavigator.js\r\n\r\nimport React from \"react\";\r\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\r\n\r\nimport { MainStackNavigator, ContactStackNavigator, ScheduleNavigator } from \"./StackNavigator\";\r\n\r\nconst Tab = createBottomTabNavigator();\r\n\r\nconst TabNavigator = () => {\r\n  return (\r\n    <Tab.Navigator>\r\n      {/* <Tab.Screen name=\"Home\" component={MainStackNavigator} /> */}\r\n      <Tab.Screen name=\"Routes\" component={ScheduleNavigator} />\r\n      {/* <Tab.Screen name=\"Contact\" component={ContactStackNavigator} /> */}\r\n    </Tab.Navigator>\r\n  );\r\n};\r\n\r\nexport default TabNavigator;","// ./navigation/DrawerNavigator.js\r\n\r\nimport React from 'react';\r\n\r\nimport { createDrawerNavigator, DrawerItem } from '@react-navigation/drawer';\r\nimport { useWindowDimensions, Text, View } from 'react-native';\r\nimport {\r\n  ContactStackNavigator,\r\n  ScheduleNavigator,\r\n  TwitterNavigator,\r\n} from './StackNavigator';\r\nimport { Button, useTheme } from 'react-native-paper';\r\nimport TabNavigator from './TabNavigator';\r\nimport { DarkModeSwitch as DKSwitch } from '../utils/DarkModeSwitch';\r\nimport { ScrollView } from 'react-native-gesture-handler';\r\n\r\nconst Drawer = createDrawerNavigator();\r\nfunction CustomDrawerContent({ navigation }) {\r\n  return (\r\n    <ScrollView>\r\n      <Button\r\n        mode=\"contained\"\r\n        onPress={() => {\r\n          // Navigate using the `navigation` prop that you received\r\n          navigation.navigate('Home');\r\n        }}\r\n      >\r\n        Select Schedule\r\n      </Button>\r\n      <Button\r\n        mode=\"contained\"\r\n        onPress={() => {\r\n          // Navigate using the `navigation` prop that you received\r\n          navigation.navigate('TwitterFeed');\r\n        }}\r\n      >\r\n        Twitter Feed\r\n      </Button>\r\n    </ScrollView>\r\n  );\r\n}\r\n\r\nconst DrawerNavigator = () => {\r\n  const dimensions = useWindowDimensions();\r\n  const theme = useTheme();\r\n  return (\r\n    <Drawer.Navigator\r\n      drawerType={dimensions.width >= 768 ? 'permanent' : 'front'}\r\n      edgeWidth={25}\r\n      // drawerContent={() => (\r\n      //   <View\r\n      //     style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}\r\n      //   >\r\n      //     <DKSwitch></DKSwitch>\r\n      //     {/* <Switch /> */}\r\n      //   </View>\r\n      // )}\r\n      drawerContent={props => <CustomDrawerContent {...props} />}\r\n    >\r\n      <Drawer.Screen name=\"Home\" component={ScheduleNavigator} />\r\n      <Drawer.Screen name=\"TwitterFeed\" component={TwitterNavigator} />\r\n      <Drawer.Screen name=\"Contact\" component={ContactStackNavigator} />\r\n    </Drawer.Navigator>\r\n  );\r\n};\r\n\r\nexport default DrawerNavigator;\r\n","// ./App.js\r\n// require('dotenv').config();\r\nimport {\r\n  NavigationContainer,\r\n  DarkTheme as NavigationDarkTheme,\r\n  DefaultTheme as NavigationDefaultTheme,\r\n} from '@react-navigation/native';\r\nimport {\r\n  DarkTheme as PaperDarkTheme,\r\n  DefaultTheme as PaperDefaultTheme,\r\n  Provider as PaperProvider,\r\n} from 'react-native-paper';\r\nconst CombinedDefaultTheme = {\r\n  ...PaperDefaultTheme,\r\n  ...NavigationDefaultTheme,\r\n  // roundness: 10,\r\n  dark: false,\r\n  colors: {\r\n    ...PaperDefaultTheme.colors,\r\n    ...NavigationDefaultTheme.colors,\r\n    primary: '#01579b',\r\n    primaryDark: '#002f6c',\r\n    primaryLight: '#4f83cc',\r\n    background: '#01579b',\r\n    accent: '#3c67a3',\r\n    columnAccent: '#5390E0',\r\n    surface: '#01457A',\r\n    card: '#224C6B',\r\n    text: '#ffffff',\r\n  },\r\n};\r\nconst CombinedDarkTheme = {\r\n  ...PaperDarkTheme,\r\n  ...NavigationDarkTheme,\r\n  dark: true,\r\n  colors: {\r\n    ...PaperDarkTheme.colors,\r\n    ...NavigationDarkTheme.colors,\r\n    background: '#121212',\r\n    accent: '#424242',\r\n    primary: '#212121',\r\n    columnAccent: '#6b6b6b',\r\n    primary: '#424242',\r\n  },\r\n};\r\n\r\nimport React from 'react';\r\n\r\nimport { MainStackNavigator } from './src/navigation/StackNavigator';\r\nimport BottomTabNavigator from './src/navigation/TabNavigator';\r\nimport DrawerNavigator from './src/navigation/DrawerNavigator';\r\nimport PreferencesContext from './src/preferences/context';\r\n\r\nimport { Text } from 'react-native-paper';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport Home from './src/screens/Home';\r\nimport About from './src/screens/About';\r\nimport SafeAreaView from 'react-native-safe-area-view';\r\nimport { StatusBar } from 'react-native';\r\n\r\nfunction App() {\r\n  const [isThemeDark, setIsThemeDark] = React.useState(false);\r\n  const [isHidingUnselected, setHideUnselected] = React.useState(false);\r\n  const theme = isThemeDark ? CombinedDarkTheme : CombinedDefaultTheme;\r\n\r\n  return (\r\n    <PreferencesContext.Provider\r\n      value={{\r\n        isThemeDark,\r\n        setIsThemeDark,\r\n        isHidingUnselected,\r\n        setHideUnselected,\r\n      }}\r\n    >\r\n      <PaperProvider theme={theme}>\r\n        <NavigationContainer theme={theme}>\r\n          {/* <MainStackNavigator /> */}\r\n          {/* <BottomTabNavigator /> */}\r\n\r\n          {/* <SafeAreaView backgroundColor={theme?.colors.primary}> */}\r\n          {/* <Text>ey</Text> */}\r\n          <StatusBar\r\n            barStyle=\"light-content\"\r\n            backgroundColor={theme?.colors.primaryDark}\r\n          ></StatusBar>\r\n          {/* </SafeAreaView> */}\r\n          <DrawerNavigator />\r\n        </NavigationContainer>\r\n      </PaperProvider>\r\n    </PreferencesContext.Provider>\r\n  );\r\n}\r\nexport default App;\r\n"],"sourceRoot":""}