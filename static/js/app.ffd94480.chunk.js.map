{"version":3,"sources":["src/preferences/context.js","src/preferences/usePreferences.js","src/utils/DarkModeSwitch.js","src/utils/GeneralMenu.js","src/utils/env.js","src/screens/Home.js","src/screens/About.js","src/utils/APIClient.js","src/screens/Contacts.js","src/screens/ScheduleSelector.js","src/screens/ScheduleView.js","src/screens/TwitterFeed.js","src/navigation/StackNavigator.js","src/navigation/DrawerNavigator.js","src/navigation/TabNavigator.js","src/serviceWorkerRegistration.js","App.js"],"names":["PreferencesContext","React","createContext","usePreferences","useContext","isThemeDark","setIsThemeDark","isHidingUnselected","setHideUnselected","toggleTheme","toggleHideSelected","DarkModeSwitch","props","theme","useTheme","View","style","flex","flexDirection","alignItems","justifyContent","color","colors","text","Switch","onValueChange","value","API_URL","GeneralMenu","useState","visible","setVisible","menuButton","ToggleButton","mode","onPress","icon","Menu","onDismiss","anchor","statusBarHeight","StyleSheet","create","center","textAlign","releaseChannel","Constants","manifest","Platform","OS","undefined","indexOf","console","log","instance","axios","baseURL","env","timeout","get","post","delete","put","patch","createStyles","Contact","styles","useMemo","usernameText","setUsernameText","inputText","setInputText","windowHeight","Dimensions","height","Surface","TextInput","margin","label","onChangeText","primary","multiline","textAlignVertical","width","alias","content","a","async","APIClient","feedback","then","response","status","alert","catch","error","ScheduleList","items","isLoading","navigation","ActivityIndicator","size","map","item","index","key","_id","navigate","routeId","routeName","ScheduleSelector","schedules","setSchedules","refreshing","setRefreshing","useEffect","result","data","retrieveData","flexGrow","ScrollView","refreshControl","RefreshControl","onRefresh","contentContainerStyle","padding","CustomRow","selected","extraStyle","stopName","shadowOpacity","flexBasis","flexShrink","hour","hourIndex","tableElement","alignContent","backgroundColor","primaryLight","columnAccent","ScheduleView","scale","Animated","Value","onZoomEvent","event","nativeEvent","useNativeDriver","onZoomStateChange","oldState","State","ACTIVE","spring","toValue","start","state","schedule","selectedColumn","scheduleScale","selectedColumns","this","retrieveSchedule","externalData","setState","route","params","ind","temp","splice","prevState","scheduleData","horizontal","id","stops","stop","stopIndex","TouchableOpacity","activeOpacity","selectColumn","flexWrap","includes","showsVerticalScrollIndicator","hours","hoursIndex","isFetching","primaryDark","fontSize","Consumer","filteringSchedule","regularSchedule","Component","box","container","paddingTop","HeadStyle","TableText","alignSelf","withTheme","loginWebView","marginTop","marginBottom","dark","source","JS","containerStyle","flexBase","html","javaScriptEnabled","Stack","createStackNavigator","ContactStackNavigator","Navigator","screenOptions","TransitionPresets","SlideFromRightIOS","headerStyle","title","headerRight","headerLeft","toggleDrawer","Screen","name","component","TwitterNavigator","TwitterFeed","options","ScheduleNavigator","Drawer","createBottomTabNavigator","createDrawerNavigator","CustomDrawerContent","DrawerNavigator","useWindowDimensions","drawerType","edgeWidth","drawerContent","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","require","CombinedDefaultTheme","PaperDefaultTheme","NavigationDefaultTheme","background","accent","surface","card","CombinedDarkTheme","PaperDarkTheme","NavigationDarkTheme","addEventListener","e","preventDefault","showInstallPromotion","URL","process","href","origin","fetch","headers","contentType","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","App","BackHandler","Provider","NavigationContainer","StatusBar","barStyle"],"mappings":"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","file":"static/js/app.ffd94480.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst PreferencesContext = React.createContext();\r\n\r\nexport const withPreferences = WrappedComponent => {\r\n  return () => {\r\n    const context = useContext(PreferencesContext);\r\n    return <WrappedComponent {...context} />;\r\n  };\r\n};\r\n\r\nexport default PreferencesContext;\r\n","import { useContext } from 'react';\r\n\r\nimport PreferencesContext from './context';\r\n\r\nexport default function usePreferences() {\r\n  const { isThemeDark, setIsThemeDark, isHidingUnselected, setHideUnselected } =\r\n    useContext(PreferencesContext);\r\n\r\n  const toggleTheme = () => setIsThemeDark(!isThemeDark);\r\n  const toggleHideSelected = () => setHideUnselected(!isHidingUnselected);\r\n\r\n  return {\r\n    isThemeDark,\r\n    setIsThemeDark,\r\n    toggleTheme,\r\n    isHidingUnselected,\r\n    setHideUnselected,\r\n    toggleHideSelected,\r\n  };\r\n}\r\n","import React from 'react';\r\nimport { View, Button } from 'react-native';\r\nimport {\r\n  useTheme,\r\n  Appbar,\r\n  TouchableRipple,\r\n  Switch,\r\n  Text,\r\n} from 'react-native-paper';\r\n\r\nimport usePreferences from '../preferences/usePreferences';\r\n\r\nfunction DarkModeSwitch(props) {\r\n  const theme = useTheme();\r\n  const { isThemeDark, toggleTheme } = usePreferences();\r\n  return (\r\n    <View\r\n      style={{\r\n        flex: 1,\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      }}\r\n    >\r\n      <Text style={{ color: theme?.colors.text }}>Mode fosc</Text>\r\n      {/* <TouchableRipple > */}\r\n      <Switch\r\n        onValueChange={() => toggleTheme()}\r\n        color={'red'}\r\n        value={isThemeDark}\r\n      ></Switch>\r\n\r\n      {/* </TouchableRipple> */}\r\n    </View>\r\n  );\r\n}\r\n\r\n// <View style={{ flex: 1, flexDirection: 'row', alignItems: 'center', justifyContent: 'center' }}>\r\n//   <Text>Dark Mode</Text>\r\n//   <Button title=\"test\" onPress={() => { toggleTheme; console.log(\"e\") }}>\r\n//   </Button>\r\n// </View >\r\n\r\nexport { DarkModeSwitch };\r\n","import React from 'react';\r\nimport { View } from 'react-native';\r\nimport {\r\n  useTheme,\r\n  Menu,\r\n  Text,\r\n  ToggleButton,\r\n  Surface,\r\n  Switch,\r\n} from 'react-native-paper';\r\nimport { DarkModeSwitch } from '../utils/DarkModeSwitch';\r\n\r\nimport usePreferences from '../preferences/usePreferences';\r\n\r\n// const MenuWindow = () => {\r\n//   return(\r\n\r\n//   )\r\n// }\r\n\r\nconst GeneralMenu = () => {\r\n  const theme = useTheme();\r\n  const { isThemeDark, toggleTheme, isHidingUnselected, toggleHideSelected } =\r\n    usePreferences();\r\n\r\n  const [visible, setVisible] = React.useState(false);\r\n  const openMenu = () => setVisible(true);\r\n  const closeMenu = () => setVisible(false);\r\n\r\n  const menuButton = (\r\n    <ToggleButton mode=\"contained\" onPress={openMenu} icon=\"dots-vertical\" />\r\n  );\r\n  return (\r\n    <View\r\n      style={{\r\n        flex: 1,\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      }}\r\n    >\r\n      <Menu\r\n        visible={visible}\r\n        onDismiss={closeMenu}\r\n        anchor={menuButton}\r\n        statusBarHeight={60}\r\n      >\r\n        <DarkModeSwitch />\r\n        <View\r\n          style={{\r\n            flex: 1,\r\n            flexDirection: 'row',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n          }}\r\n        >\r\n          <Text style={{ color: theme?.colors.text }}>Filtrar parades</Text>\r\n          <Switch\r\n            onValueChange={() => toggleHideSelected()}\r\n            color={'red'}\r\n            value={isHidingUnselected}\r\n          ></Switch>\r\n        </View>\r\n        {/* <Menu.Item onPress={() => { toggleTheme() }} title=\"Toggle Dark/Light theme\" /> */}\r\n      </Menu>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default GeneralMenu;\r\n","import Constants from 'expo-constants';\r\nimport { Platform } from 'react-native';\r\nimport {\r\n  API_URL as envAPI_URL,\r\n  PRODUCTION_API_URL as envPROD_API_URL,\r\n} from '@env';\r\n\r\nlet API_URL;\r\n\r\nconst releaseChannel = Constants.manifest.releaseChannel;\r\n\r\nif (Platform.OS == 'web') {\r\n  API_URL = 'https://buschedule-api.herokuapp.com';\r\n} else {\r\n  if (releaseChannel === undefined) {\r\n    API_URL = envAPI_URL;\r\n  } else if (releaseChannel.indexOf('production') !== -1) {\r\n    API_URL = envPROD_API_URL;\r\n  }\r\n}\r\n\r\nconsole.log('Current API url = ' + API_URL);\r\n// API_URL = 'http://192.168.0.14:8080';\r\nexport default {\r\n  API_URL,\r\n};\r\n","// ./screens/Home.js\r\n\r\nimport React from 'react';\r\nimport { View, Button, Text, StyleSheet } from 'react-native';\r\nimport { Surface } from 'react-native-paper';\r\nimport Header from '../navigation/Header';\r\nimport GeneralMenu from '../utils/GeneralMenu';\r\n\r\nconst Home = ({ navigation }) => {\r\n  return (\r\n    <Surface style={styles.center}>\r\n      <Text>This is the home screen</Text>\r\n      <Button\r\n        title=\"Go to About Screen\"\r\n        onPress={() => navigation.navigate('About')}\r\n      />\r\n      {/* <Header></Header> */}\r\n    </Surface>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  center: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    textAlign: 'center',\r\n  },\r\n});\r\n\r\nexport default Home;\r\n","// ./screens/About.js\r\n\r\nimport React from \"react\";\r\nimport { View, StyleSheet, Text } from \"react-native\";\r\n\r\nconst About = () => {\r\n  return (\r\n    <View style={styles.center}>\r\n      <Text>This is the about screen</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  center: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    textAlign: \"center\",\r\n  },\r\n});\r\n\r\nexport default About;","import axios from 'axios';\r\n\r\nimport env from './env';\r\n\r\nconst instance = axios.create({\r\n  baseURL: env.API_URL,\r\n  baseURL: 'https://buschedule-api.herokuapp.com',\r\n  timeout: 4000,\r\n});\r\n\r\nexport default {\r\n  get: instance.get,\r\n  post: instance.post,\r\n  delete: instance.delete,\r\n  put: instance.put,\r\n  patch: instance.patch,\r\n};\r\n","// ./screens/Contact.js\r\n\r\nimport React, { useState, useMemo } from 'react';\r\nimport { View, StyleSheet, Text, Dimensions, Alert } from 'react-native';\r\nimport APIClient from '../utils/APIClient';\r\nimport { useTheme, TextInput, Button, Surface } from 'react-native-paper';\r\nimport {} from 'react-native-web';\r\nconst Contact = () => {\r\n  const theme = useTheme();\r\n  const styles = useMemo(() => createStyles(theme), [theme]);\r\n  const [usernameText, setUsernameText] = useState('Anònim');\r\n  const [inputText, setInputText] = useState('');\r\n  const windowHeight = Dimensions.get('window').height;\r\n\r\n  const sendFeedback = async (alias, content) => {\r\n    await APIClient.post('/feedback', { alias: alias, feedback: content })\r\n      .then(function (response) {\r\n        console.log(response);\r\n        if (response.status == 201) {\r\n          console.log('success');\r\n          alert(\"El feedback s'ha enviat correctament\", 'My Alert Msg', [\r\n            {\r\n              text: 'Cancel',\r\n              onPress: () => console.log('Cancel Pressed'),\r\n              style: 'cancel',\r\n            },\r\n            { text: 'OK' },\r\n          ]);\r\n          setUsernameText('Anònim');\r\n          setInputText('');\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Surface style={styles.center}>\r\n      <TextInput\r\n        style={[{ margin: 10, textAlign: 'center' }]}\r\n        label={'Nom'}\r\n        mode={'flat'}\r\n        onChangeText={text => setUsernameText(text)}\r\n        value={usernameText}\r\n        theme={{ colors: { primary: theme?.colors.text } }}\r\n      ></TextInput>\r\n\r\n      <TextInput\r\n        multiline={true}\r\n        textAlignVertical=\"top\"\r\n        style={[{ margin: 10, width: '90%', height: windowHeight / 2 }]}\r\n        theme={{ colors: { primary: theme?.colors.text } }}\r\n        // style={[\r\n        //   {\r\n        //     ...styles.textInputCentered,\r\n        //     // width: '90%',\r\n        //     // flexGrow: 1,\r\n        //     // height: windowHeight / 2,\r\n        //     // backgroundColor: 'red',\r\n        //   },\r\n        // ]}\r\n\r\n        mode={'flat'}\r\n        label={'Contingut'}\r\n        onChangeText={text => setInputText(text)}\r\n        value={inputText}\r\n      ></TextInput>\r\n      <Button\r\n        mode={'contained'}\r\n        onPress={() => sendFeedback(usernameText, inputText)}\r\n      >\r\n        Enviar\r\n      </Button>\r\n    </Surface>\r\n  );\r\n};\r\n\r\nconst createStyles = theme =>\r\n  StyleSheet.create({\r\n    center: {\r\n      flex: 1,\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      textAlign: 'center',\r\n    },\r\n  });\r\n\r\nexport default Contact;\r\n","// ./screens/About.js\r\n\r\nimport { ThemeProvider } from '@react-navigation/native';\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  View,\r\n  StyleSheet,\r\n  Text,\r\n  RefreshControl,\r\n  ScrollView,\r\n} from 'react-native';\r\n// import {  } from \"react-native-gesture-handler\";\r\nimport {\r\n  Button,\r\n  useTheme,\r\n  Surface,\r\n  ActivityIndicator,\r\n  Divider,\r\n} from 'react-native-paper';\r\nimport APIClient from '../utils/APIClient';\r\n\r\nconst ScheduleSelector = ({ navigation }) => {\r\n  const theme = useTheme();\r\n  const [schedules, setSchedules] = useState([]);\r\n  const [refreshing, setRefreshing] = useState(false);\r\n\r\n  // const retrieveData = async () => {\r\n  //   try {\r\n  //     const { data } = await APIClient.get('/schedules/names');\r\n  //     setSchedules(data);\r\n  //     console.log(data);\r\n  //   } catch (ex) {\r\n  //     console.log(ex);\r\n  //     console.log({ ...ex });\r\n  //   }\r\n  // };\r\n\r\n  const onRefresh = () => {\r\n    setRefreshing(true);\r\n    retrieveData();\r\n    setRefreshing(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const retrieveData = async () => {\r\n      const result = await APIClient.get('/schedules/names');\r\n      console.log(result.data);\r\n      setSchedules(result.data);\r\n      setRefreshing(false);\r\n    };\r\n    retrieveData();\r\n    // retrieveData();\r\n  }, [refreshing]);\r\n\r\n  // const generateRouteButtons = () => {\r\n  //   const routeButtons = [];\r\n  //   for (const e in schedules) {\r\n  //     routeButtons.push(<Button title={e.routeName}></Button>)\r\n  //   }\r\n  //   return routeButtons;\r\n  // }\r\n  return (\r\n    <Surface style={{ flexGrow: 1, flexDirection: 'column' }}>\r\n      {/* <Text>{JSON.stringify(schedules)}</Text> */}\r\n      {/* <Text>This is the selection screen</Text> */}\r\n      {/* {console.log(generateRouteButtons())} */}\r\n      <ScrollView\r\n        refreshControl={\r\n          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\r\n        }\r\n        contentContainerStyle={{\r\n          flex: 1,\r\n          flexDirection: 'column',\r\n          padding: 10,\r\n        }}\r\n      >\r\n        <Button\r\n          mode=\"contained\"\r\n          style={{ margin: 5 }}\r\n          onPress={() => setRefreshing(true)}\r\n        >\r\n          Recarregar Horaris\r\n        </Button>\r\n\r\n        <ScheduleList\r\n          isLoading={refreshing}\r\n          items={schedules}\r\n          navigation={navigation}\r\n        />\r\n      </ScrollView>\r\n    </Surface>\r\n  );\r\n};\r\n\r\nconst ScheduleList = ({ items, isLoading, navigation }) => {\r\n  return isLoading ? (\r\n    <ActivityIndicator size=\"large\" />\r\n  ) : (\r\n    items.map((item, index) => {\r\n      return (\r\n        <Button /*style={{ backgroundColor: theme?.colors.accent }}*/\r\n          key={item._id}\r\n          mode=\"contained\"\r\n          onPress={() =>\r\n            navigation.navigate('Schedule Viewer', {\r\n              routeId: item._id,\r\n              routeName: item.routeName,\r\n            })\r\n          }\r\n          style={{ margin: 2 }}\r\n        >\r\n          {item.routeName}\r\n        </Button>\r\n      );\r\n    })\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  center: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    textAlign: 'center',\r\n  },\r\n});\r\n\r\nexport default ScheduleSelector;\r\n","// ./screens/About.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Dimensions,\r\n  View,\r\n  StyleSheet,\r\n  // Button,\r\n  // VirtualizedList,\r\n  // FlatList,\r\n  // Image,\r\n  Animated,\r\n  ScrollView,\r\n  TouchableOpacity,\r\n  // TouchableHighlight,\r\n  // BackHandler,\r\n} from 'react-native';\r\nimport {\r\n  Surface,\r\n  DataTable,\r\n  Text,\r\n  useTheme,\r\n  withTheme,\r\n  ActivityIndicator,\r\n} from 'react-native-paper';\r\n// import { back } from 'react-native/Libraries/Animated/src/Easing';\r\nimport APIClient from '../utils/APIClient';\r\n\r\n// import {\r\n//   Table,\r\n//   TableWrapper,\r\n//   Row,\r\n//   Rows,\r\n//   Col,\r\n//   Cols,\r\n//   Cell,\r\n// } from 'react-native-table-component';\r\n\r\nimport { PinchGestureHandler, State } from 'react-native-gesture-handler';\r\n// var classNames = require('classnames');\r\nimport usePreferences from '../preferences/usePreferences';\r\nimport PreferencesContext from '../preferences/context';\r\n\r\nconst CustomRow = ({ item, index, selected, extraStyle = false, stopName }) => {\r\n  const theme = useTheme();\r\n  const { isHidingUnselected, toggleHideSelected } = usePreferences();\r\n  return (\r\n    <Surface\r\n      style={[\r\n        {\r\n          flex: 1,\r\n          textAlign: 'center',\r\n          shadowOpacity: 0,\r\n          // flexGrow: 1,\r\n          // flexShrink: 1,\r\n          // alignContent: 'center',\r\n          // alignSelf: 'center',\r\n          //backgroundColor: theme?.colors.primary,\r\n          // backgroundColor: 'yellow',\r\n          // width: 30,\r\n          flexDirection: 'column',\r\n          // justifyContent: 'center',  PREVIOUS\r\n\r\n          // alignItems: 'stretch',\r\n          // width: 0,\r\n          // margin: 10,\r\n          // flexGrow: 2,\r\n          // flexWrap: 'wrap',\r\n        },\r\n        [\r\n          extraStyle\r\n            ? { flexBasis: 200, flexGrow: 1, flexShrink: 1, flex: 0 }\r\n            : {},\r\n        ],\r\n      ]}\r\n    >\r\n      {/* {stopName != null && (\r\n        <Text\r\n          style={[\r\n            {\r\n              backgroundColor: theme?.colors.surface,\r\n              // flex: 1,\r\n              textAlignVertical: 'center',\r\n              textAlign: 'center',\r\n              height: 40,\r\n              textAlignVertical: 'center',\r\n              // padding: 10,\r\n            },\r\n          ]}\r\n        >\r\n          {stopName}\r\n        </Text>\r\n      )} */}\r\n\r\n      {item.map((hour, hourIndex) => {\r\n        // if (hourIndex < 3)\r\n        return (\r\n          <Text\r\n            key={index * 10 + hourIndex}\r\n            style={[\r\n              {\r\n                ...styles.tableElement,\r\n                // flexGrow: 1,\r\n                textAlign: 'center',\r\n                // margin: 3,\r\n                // minHeight: 100,\r\n                padding: 10,\r\n\r\n                // width: 100,\r\n                // backgroundColor: 'red',\r\n                alignContent: 'center',\r\n                // minHeight: 10,\r\n              },\r\n              isHidingUnselected\r\n                ? hourIndex % 2\r\n                  ? { backgroundColor: theme?.colors.primaryLight }\r\n                  : { backgroundColor: theme?.colors.primary }\r\n                : selected\r\n                ? { backgroundColor: theme?.colors.columnAccent }\r\n                : hourIndex % 2\r\n                ? { backgroundColor: theme?.colors.primaryLight }\r\n                : { backgroundColor: theme?.colors.primary },\r\n            ]}\r\n          >\r\n            {hour != '' ? hour : '-'}\r\n          </Text>\r\n        );\r\n      })}\r\n    </Surface>\r\n  );\r\n};\r\n\r\nclass ScheduleView extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      schedule: null,\r\n      selectedColumn: null,\r\n      scheduleScale: 1,\r\n      selectedColumns: [],\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    // console.log(\"mounted\")\r\n    this.retrieveSchedule().then(externalData => {\r\n      this.setState({ schedule: externalData[0] });\r\n    });\r\n  }\r\n  async retrieveSchedule() {\r\n    try {\r\n      const { routeId } = this.props.route.params;\r\n      const { data } = await APIClient.get('/schedules/' + routeId);\r\n      this.setState({ schedule: data[0] });\r\n      return data;\r\n    } catch (ex) {\r\n      console.log(ex);\r\n    }\r\n  }\r\n  componentDidUpdate() {\r\n    console.log(this.state.selectedColumns);\r\n  }\r\n\r\n  selectColumn(index) {\r\n    console.log('Selected ' + index);\r\n    var ind = this.state.selectedColumns.indexOf(index);\r\n    console.log('index = ' + ind);\r\n    if (ind !== -1) {\r\n      var temp = this.state.selectedColumns;\r\n      temp.splice(ind, 1);\r\n      console.log('temp = ' + temp);\r\n      this.setState(prevState => ({\r\n        selectedColumns: temp,\r\n      }));\r\n    } else {\r\n      this.setState(prevState => ({\r\n        selectedColumns: [...prevState.selectedColumns, index],\r\n      }));\r\n    }\r\n\r\n    // console.log(index);\r\n  }\r\n\r\n  scale = new Animated.Value(1);\r\n  onZoomEvent = Animated.event(\r\n    [\r\n      {\r\n        nativeEvent: { scale: this.scale },\r\n      },\r\n    ],\r\n    {\r\n      useNativeDriver: true,\r\n    }\r\n  );\r\n  onZoomStateChange = event => {\r\n    if (event.nativeEvent.oldState === State.ACTIVE) {\r\n      Animated.spring(this.scale, {\r\n        toValue: 1,\r\n        useNativeDriver: true,\r\n      }).start();\r\n    }\r\n  };\r\n\r\n  regularSchedule() {\r\n    const { theme } = this.props;\r\n    const scheduleData = this.state.schedule;\r\n    return (\r\n      <View\r\n        style={{\r\n          flex: 1,\r\n        }}\r\n      >\r\n        <ScrollView\r\n          horizontal\r\n          contentContainerStyle={{\r\n            flexGrow: 1,\r\n            alignContent: 'center',\r\n          }}\r\n        >\r\n          <View style={{ flex: 1 }} id=\"horizontalContainer\">\r\n            <View\r\n              id=\"stopNameRow\"\r\n              style={{\r\n                flex: 1,\r\n\r\n                flexDirection: 'row',\r\n                // alignItems: 'stretch',\r\n                justifyContent: 'space-between',\r\n              }}\r\n            >\r\n              {scheduleData.stops.map((stop, stopIndex) => {\r\n                return (\r\n                  <TouchableOpacity\r\n                    activeOpacity={1}\r\n                    onPress={() => this.selectColumn(stopIndex)}\r\n                    style={[\r\n                      {\r\n                        flex: 1,\r\n                        flexGrow: 1,\r\n                        flexShrink: 1,\r\n                        flexBasis: 0,\r\n                        flexWrap: 'wrap',\r\n                        padding: 3,\r\n                        justifyContent: 'center', //Centered horizontally\r\n                        alignItems: 'center', //Centered vertically\r\n                      },\r\n                      this.state.selectedColumns.includes(stopIndex)\r\n                        ? {\r\n                            backgroundColor: theme?.colors.columnAccent,\r\n                          }\r\n                        : {},\r\n                    ]}\r\n                    key={stopIndex}\r\n                  >\r\n                    <Text style={{ textAlign: 'center' }}>{stop}</Text>\r\n                  </TouchableOpacity>\r\n                );\r\n              })}\r\n            </View>\r\n            <View\r\n              style={{\r\n                flex: 10,\r\n              }}\r\n            >\r\n              <ScrollView\r\n                style={{}}\r\n                showsVerticalScrollIndicator={false}\r\n                contentContainerStyle={{\r\n                  height: 0,\r\n                  flexDirection: 'row',\r\n                  justifyContent: 'center',\r\n                }}\r\n              >\r\n                {scheduleData.hours.map((hours, hoursIndex) => {\r\n                  return (\r\n                    <CustomRow\r\n                      key={hoursIndex}\r\n                      index={hoursIndex}\r\n                      item={hours}\r\n                      // selectedColumns={this.state.selectedColumns}\r\n                      selected={this.state.selectedColumns.includes(hoursIndex)}\r\n                    />\r\n                  );\r\n                })}\r\n              </ScrollView>\r\n            </View>\r\n          </View>\r\n        </ScrollView>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  filteringSchedule() {\r\n    const { theme } = this.props;\r\n    const scheduleData = this.state.schedule;\r\n    return (\r\n      <View\r\n        style={{\r\n          flex: 1,\r\n        }}\r\n      >\r\n        <View>\r\n          <ScrollView\r\n            horizontal\r\n            contentContainerStyle={{\r\n              flexGrow: 1,\r\n              alignContent: 'center',\r\n            }}\r\n          >\r\n            {scheduleData.stops.map((stop, stopIndex) => {\r\n              return (\r\n                <TouchableOpacity\r\n                  activeOpacity={1}\r\n                  onPress={() => this.selectColumn(stopIndex)}\r\n                  style={[\r\n                    {\r\n                      flex: 1,\r\n                      flexGrow: 1,\r\n                      flexShrink: 1,\r\n                      flexBasis: 0,\r\n                      flexWrap: 'wrap',\r\n                      padding: 3,\r\n                      justifyContent: 'center', //Centered horizontally\r\n                      alignItems: 'center', //Centered vertically\r\n                    },\r\n                    this.state.selectedColumns.includes(stopIndex)\r\n                      ? {\r\n                          backgroundColor: theme?.colors.columnAccent,\r\n                        }\r\n                      : {},\r\n                  ]}\r\n                  key={stopIndex}\r\n                >\r\n                  <Text style={{ textAlign: 'center' }}>{stop}</Text>\r\n                </TouchableOpacity>\r\n              );\r\n            })}\r\n          </ScrollView>\r\n        </View>\r\n        <View style={{ flex: 1 }}>\r\n          <ScrollView\r\n            horizontal\r\n            contentContainerStyle={{\r\n              // height: 0,\r\n              flexDirection: 'column',\r\n              // justifyContent: 'center',\r\n            }}\r\n          >\r\n            <View style={{ flexDirection: 'row' }}>\r\n              {this.state.selectedColumns.map((id, index) => {\r\n                return (\r\n                  <TouchableOpacity\r\n                    activeOpacity={1}\r\n                    onPress={() => this.selectColumn(id)}\r\n                    style={[\r\n                      {\r\n                        flex: 1,\r\n                        flexGrow: 1,\r\n                        flexShrink: 1,\r\n                        flexBasis: 0,\r\n                        flexWrap: 'wrap',\r\n                        padding: 3,\r\n                        justifyContent: 'center', //Centered horizontally\r\n                        alignItems: 'center', //Centered vertically\r\n                      },\r\n                    ]}\r\n                    key={id}\r\n                  >\r\n                    <Text style={{ textAlign: 'center' }}>\r\n                      {scheduleData.stops[id]}\r\n                    </Text>\r\n                  </TouchableOpacity>\r\n                );\r\n              })}\r\n            </View>\r\n\r\n            <ScrollView\r\n              style={{}}\r\n              showsVerticalScrollIndicator={false}\r\n              contentContainerStyle={{\r\n                height: 0,\r\n                flexDirection: 'row',\r\n                // justifyContent: 'center',\r\n              }}\r\n            >\r\n              {scheduleData.hours.map((hours, hoursIndex) => {\r\n                return (\r\n                  this.state.selectedColumns.includes(hoursIndex) && (\r\n                    <CustomRow\r\n                      key={hoursIndex}\r\n                      index={hoursIndex}\r\n                      item={hours}\r\n                      extraStyle={true}\r\n                      // selectedColumns={this.state.selectedColumns}\r\n                      selected={this.state.selectedColumns.includes(hoursIndex)}\r\n                    />\r\n                  )\r\n                );\r\n              })}\r\n            </ScrollView>\r\n          </ScrollView>\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    // this.retrieveSchedule()\r\n\r\n    const isFetching = this.state.schedule === null;\r\n    const { theme } = this.props;\r\n    let screenHeight = Dimensions.get('window').height;\r\n    return (\r\n      // <Surface style={styles.center}>\r\n      <Surface\r\n        style={{\r\n          flex: 1,\r\n          // flexDirection: 'row',\r\n          // justifyContent: 'flex-end',\r\n          // alignItems: 'center',\r\n          // textAlign: 'center',\r\n        }}\r\n      >\r\n        {isFetching ? (\r\n          <ActivityIndicator size=\"large\" />\r\n        ) : (\r\n          <Surface style={{ flex: 1, justifyContent: 'center' }}>\r\n            <Surface\r\n              style={{\r\n                backgroundColor: theme?.colors.primaryDark,\r\n                alignContent: 'center',\r\n              }}\r\n            >\r\n              <Text\r\n                style={{\r\n                  textAlign: 'center',\r\n                  fontSize: 20,\r\n                }}\r\n              >\r\n                {this.state.schedule.routeName}\r\n              </Text>\r\n            </Surface>\r\n\r\n            <PreferencesContext.Consumer>\r\n              {({ isHidingUnselected, toggleHideSelected }) =>\r\n                isHidingUnselected\r\n                  ? this.filteringSchedule()\r\n                  : this.regularSchedule()\r\n              }\r\n            </PreferencesContext.Consumer>\r\n          </Surface>\r\n        )}\r\n      </Surface>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  box: {\r\n    width: 50,\r\n    height: 50,\r\n  },\r\n  tableElement: {\r\n    width: 100,\r\n  },\r\n  center: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    textAlign: 'center',\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    // display: flex,\r\n    padding: 18,\r\n    paddingTop: 35,\r\n    // backgroundColor: '#ffffff'\r\n    // alignItems: 'center'\r\n    justifyContent: 'space-around',\r\n  },\r\n  HeadStyle: {\r\n    height: 50,\r\n    alignContent: 'center',\r\n    // backgroundColor: '#ffe0f0'\r\n  },\r\n  TableText: {\r\n    // margin: 10,\r\n    flex: 1,\r\n    textAlign: 'center',\r\n    // textAlignVertical: 'center',\r\n    // justifyContent: 'center',\r\n    // alignContent: 'center',\r\n    // alignItems: 'center',\r\n    alignSelf: 'center',\r\n    width: 100,\r\n    // flexGrow: 2,\r\n    // flexWrap: 'wrap',\r\n  },\r\n});\r\nexport default withTheme(ScheduleView);\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Text, Surface, useTheme, withTheme } from 'react-native-paper';\r\nimport { View, Platform, StyleSheet } from 'react-native';\r\nimport { WebView } from 'react-native-web-webview';\r\nfunction TwitterFeed(props) {\r\n  const dark = props.theme?.dark;\r\n  let JS =\r\n    '<script type=\"text/javascript\" src=\"https://platform.twitter.com/widgets.js\"></script>';\r\n\r\n  let source =\r\n    JS +\r\n    '<a class=\"twitter-timeline\"' +\r\n    (dark ? 'data-theme=\"dark\"' : '') +\r\n    'href=\"https://twitter.com/BusGarraf?ref_src=twsrc%5Etfw\">Carregant Twitts...</a> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> ';\r\n  console.log(dark);\r\n  return (\r\n    <View style={styles.container}>\r\n      <WebView\r\n        containerStyle={{ flex: 1, flexBase: 10, flexShrink: 1 }}\r\n        source={{ html: source }}\r\n        javaScriptEnabled={true}\r\n      />\r\n    </View>\r\n  );\r\n}\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'flex-start',\r\n    alignItems: 'stretch',\r\n  },\r\n  loginWebView: {\r\n    flex: 1,\r\n    marginTop: 30,\r\n    marginBottom: 20,\r\n  },\r\n});\r\n\r\nexport default withTheme(TwitterFeed);\r\n","// ./navigation/StackNavigator.js\r\n\r\nimport React from 'react';\r\nimport {\r\n  createStackNavigator,\r\n  TransitionPresets,\r\n} from '@react-navigation/stack';\r\n\r\nimport Home from '../screens/Home';\r\nimport About from '../screens/About';\r\nimport Contact from '../screens/Contacts';\r\nimport ScheduleSelector from '../screens/ScheduleSelector';\r\nimport ScheduleView from '../screens/ScheduleView';\r\nimport TwitterFeed from '../screens/TwitterFeed';\r\nimport {\r\n  Switch,\r\n  useTheme,\r\n  Appbar,\r\n  TouchableRipple,\r\n  ToggleButton,\r\n  Button,\r\n} from 'react-native-paper';\r\nimport { Text, View } from 'react-native';\r\n// import PreferencesContext from '../PreferencesContext';\r\nimport { DarkModeSwitch as DKSwitch } from '../utils/DarkModeSwitch';\r\nimport GeneralMenu from '../utils/GeneralMenu';\r\nconst Stack = createStackNavigator();\r\n\r\nconst MainStackNavigator = ({ scene }) => {\r\n  const theme = useTheme();\r\n  // const { toggleTheme, isThemeDark } = React.useContext(PreferencesContext);\r\n\r\n  const ScreenOptions = {\r\n    // ...TransitionPresets.SlideFromRightIOS, // This is where the transition happens\r\n    // headerStyle: {\r\n    //   backgroundColor: '#f4511e'\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <Stack.Navigator\r\n      screenOptions={{\r\n        ...TransitionPresets.SlideFromRightIOS,\r\n        headerStyle: {\r\n          backgroundColor: theme?.colors.primary,\r\n        },\r\n        headerRight: () => <GeneralMenu />,\r\n      }}\r\n    >\r\n      <Stack.Screen name=\"Home\" component={Home} />\r\n      <Stack.Screen name=\"About\" component={About} />\r\n    </Stack.Navigator>\r\n  );\r\n};\r\n\r\nconst ContactStackNavigator = ({ navigation }) => {\r\n  const theme = useTheme();\r\n  return (\r\n    // <Stack.Navigator screenOptions={ScreenOptions}>\r\n    <Stack.Navigator\r\n      screenOptions={{\r\n        ...TransitionPresets.SlideFromRightIOS,\r\n        headerStyle: {\r\n          backgroundColor: theme?.colors.primary,\r\n        },\r\n        title: 'Contacte',\r\n        headerRight: () => <GeneralMenu />,\r\n        headerLeft: () => (\r\n          <ToggleButton\r\n            mode=\"contained\"\r\n            icon=\"menu\"\r\n            onPress={() => navigation.toggleDrawer()}\r\n          />\r\n        ),\r\n      }}\r\n    >\r\n      <Stack.Screen name=\"Contact\" component={Contact} />\r\n    </Stack.Navigator>\r\n  );\r\n};\r\n\r\nconst TwitterNavigator = ({ navigation }) => {\r\n  const theme = useTheme();\r\n  return (\r\n    <Stack.Navigator\r\n      screenOptions={{\r\n        ...TransitionPresets.SlideFromRightIOS,\r\n        headerStyle: {\r\n          backgroundColor: theme?.colors.primary,\r\n        },\r\n        headerRight: () => <GeneralMenu />,\r\n      }}\r\n    >\r\n      <Stack.Screen\r\n        name=\"View Tweets\"\r\n        component={TwitterFeed}\r\n        options={{\r\n          title: 'Twitter BusGarraf',\r\n          headerRight: () => <DKSwitch />,\r\n          headerLeft: () => (\r\n            <ToggleButton\r\n              mode=\"contained\"\r\n              icon=\"menu\"\r\n              onPress={() => navigation.toggleDrawer()}\r\n            />\r\n          ),\r\n        }}\r\n      />\r\n    </Stack.Navigator>\r\n  );\r\n};\r\n\r\nconst ScheduleNavigator = ({ navigation }) => {\r\n  const theme = useTheme();\r\n  return (\r\n    <Stack.Navigator\r\n      screenOptions={{\r\n        ...TransitionPresets.SlideFromRightIOS,\r\n        headerStyle: {\r\n          backgroundColor: theme?.colors.primary,\r\n        },\r\n        headerRight: () => <GeneralMenu />,\r\n      }}\r\n    >\r\n      <Stack.Screen\r\n        name=\"Select Schedule\"\r\n        component={ScheduleSelector}\r\n        options={{\r\n          title: 'HoraBus',\r\n          headerRight: () => <DKSwitch />,\r\n          headerLeft: () => (\r\n            <ToggleButton\r\n              mode=\"contained\"\r\n              icon=\"menu\"\r\n              onPress={() => navigation.toggleDrawer()}\r\n            />\r\n          ),\r\n        }}\r\n      />\r\n      <Stack.Screen\r\n        name=\"Schedule Viewer\"\r\n        component={ScheduleView}\r\n        options={({ route }) => ({ title: route.params.routeName })}\r\n      />\r\n    </Stack.Navigator>\r\n  );\r\n};\r\n\r\nexport {\r\n  MainStackNavigator,\r\n  ContactStackNavigator,\r\n  ScheduleNavigator,\r\n  TwitterNavigator,\r\n};\r\n","// ./navigation/DrawerNavigator.js\r\n\r\nimport React from 'react';\r\n\r\nimport { createDrawerNavigator, DrawerItem } from '@react-navigation/drawer';\r\nimport { useWindowDimensions, Text, View, BackHandler } from 'react-native';\r\nimport {\r\n  ContactStackNavigator,\r\n  ScheduleNavigator,\r\n  TwitterNavigator,\r\n} from './StackNavigator';\r\nimport { Button, useTheme } from 'react-native-paper';\r\nimport TabNavigator from './TabNavigator';\r\nimport { DarkModeSwitch as DKSwitch } from '../utils/DarkModeSwitch';\r\nimport { ScrollView } from 'react-native-gesture-handler';\r\n\r\nconst Drawer = createDrawerNavigator();\r\nfunction CustomDrawerContent({ navigation }) {\r\n  return (\r\n    <ScrollView>\r\n      <Button\r\n        mode=\"contained\"\r\n        onPress={() => {\r\n          // Navigate using the `navigation` prop that you received\r\n          navigation.navigate('Home');\r\n        }}\r\n      >\r\n        Horaris\r\n      </Button>\r\n      <Button\r\n        mode=\"contained\"\r\n        onPress={() => {\r\n          // Navigate using the `navigation` prop that you received\r\n          navigation.navigate('TwitterFeed');\r\n        }}\r\n      >\r\n        Twitter\r\n      </Button>\r\n      <Button\r\n        mode=\"contained\"\r\n        onPress={() => {\r\n          // Navigate using the `navigation` prop that you received\r\n          navigation.navigate('Contact');\r\n        }}\r\n      >\r\n        Contacte\r\n      </Button>\r\n    </ScrollView>\r\n  );\r\n}\r\n\r\nconst DrawerNavigator = () => {\r\n  const dimensions = useWindowDimensions();\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <Drawer.Navigator\r\n      // drawerType={dimensions.width >= 768 ? 'permanent' : 'front'}\r\n      drawerType={'front'}\r\n      edgeWidth={25}\r\n      // drawerContent={() => (\r\n      //   <View\r\n      //     style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}\r\n      //   >\r\n      //     <DKSwitch></DKSwitch>\r\n      //     {/* <Switch /> */}\r\n      //   </View>\r\n      // )}\r\n      drawerContent={props => <CustomDrawerContent {...props} />}\r\n    >\r\n      <Drawer.Screen name=\"Home\" component={ScheduleNavigator} />\r\n      <Drawer.Screen name=\"TwitterFeed\" component={TwitterNavigator} />\r\n      <Drawer.Screen name=\"Contact\" component={ContactStackNavigator} />\r\n    </Drawer.Navigator>\r\n  );\r\n};\r\n\r\nexport default DrawerNavigator;\r\n","// ./navigation/TabNavigator.js\r\n\r\nimport React from \"react\";\r\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\r\n\r\nimport { MainStackNavigator, ContactStackNavigator, ScheduleNavigator } from \"./StackNavigator\";\r\n\r\nconst Tab = createBottomTabNavigator();\r\n\r\nconst TabNavigator = () => {\r\n  return (\r\n    <Tab.Navigator>\r\n      {/* <Tab.Screen name=\"Home\" component={MainStackNavigator} /> */}\r\n      <Tab.Screen name=\"Routes\" component={ScheduleNavigator} />\r\n      {/* <Tab.Screen name=\"Contact\" component={ContactStackNavigator} /> */}\r\n    </Tab.Navigator>\r\n  );\r\n};\r\n\r\nexport default TabNavigator;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  const isEnvProduction = process.env.NODE_ENV === 'production';\r\n  if (isEnvProduction && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      console.log('PUBLIC_URL = ' + process.env.PUBLIC_URL);\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","// ./App.js\r\nrequire('dotenv').config();\r\nrequire('fs');\r\nimport {\r\n  NavigationContainer,\r\n  DarkTheme as NavigationDarkTheme,\r\n  DefaultTheme as NavigationDefaultTheme,\r\n} from '@react-navigation/native';\r\nimport {\r\n  DarkTheme as PaperDarkTheme,\r\n  DefaultTheme as PaperDefaultTheme,\r\n  Provider as PaperProvider,\r\n} from 'react-native-paper';\r\nconst CombinedDefaultTheme = {\r\n  ...PaperDefaultTheme,\r\n  ...NavigationDefaultTheme,\r\n  // roundness: 10,\r\n  dark: false,\r\n  colors: {\r\n    ...PaperDefaultTheme.colors,\r\n    ...NavigationDefaultTheme.colors,\r\n    primary: '#01579b',\r\n    primaryDark: '#002f6c',\r\n    primaryLight: '#4f83cc',\r\n    background: '#01579b',\r\n    accent: '#3c67a3',\r\n    columnAccent: '#5390E0',\r\n    surface: '#01457A',\r\n    card: '#224C6B',\r\n    text: '#ffffff',\r\n  },\r\n};\r\nconst CombinedDarkTheme = {\r\n  ...PaperDarkTheme,\r\n  ...NavigationDarkTheme,\r\n  dark: true,\r\n  colors: {\r\n    ...PaperDarkTheme.colors,\r\n    ...NavigationDarkTheme.colors,\r\n    background: '#121212',\r\n    accent: '#424242',\r\n    primary: '#212121',\r\n    columnAccent: '#6b6b6b',\r\n    primary: '#424242',\r\n    primaryLight: '#6b6b6b',\r\n  },\r\n};\r\n\r\nimport React from 'react';\r\n\r\n// import { MainStackNavigator } from './src/navigation/StackNavigator';\r\n// import BottomTabNavigator from './src/navigation/TabNavigator';\r\n\r\n// import { Text } from 'react-native-paper';\r\n// import { createStackNavigator } from '@react-navigation/stack';\r\n// import Home from './src/screens/Home';\r\n// import About from './src/screens/About';\r\n// import SafeAreaView from 'react-native-safe-area-view';\r\nimport DrawerNavigator from './src/navigation/DrawerNavigator';\r\nimport PreferencesContext from './src/preferences/context';\r\nimport { StatusBar, BackHandler } from 'react-native';\r\n\r\nimport * as serviceWorkerRegistration from './src/serviceWorkerRegistration';\r\n\r\nfunction App() {\r\n  const [isThemeDark, setIsThemeDark] = React.useState(false);\r\n  const [isHidingUnselected, setHideUnselected] = React.useState(false);\r\n  const theme = isThemeDark ? CombinedDarkTheme : CombinedDefaultTheme;\r\n  BackHandler.addEventListener('hardwareBackPress', function () {\r\n    return true;\r\n  });\r\n  return (\r\n    <PreferencesContext.Provider\r\n      value={{\r\n        isThemeDark,\r\n        setIsThemeDark,\r\n        isHidingUnselected,\r\n        setHideUnselected,\r\n      }}\r\n    >\r\n      <PaperProvider theme={theme}>\r\n        <NavigationContainer theme={theme}>\r\n          {/* <MainStackNavigator /> */}\r\n          {/* <BottomTabNavigator /> */}\r\n\r\n          {/* <SafeAreaView backgroundColor={theme?.colors.primary}> */}\r\n          {/* <Text>ey</Text> */}\r\n          <StatusBar\r\n            barStyle=\"light-content\"\r\n            backgroundColor={theme?.colors.primaryDark}\r\n          ></StatusBar>\r\n          {/* </SafeAreaView> */}\r\n          <DrawerNavigator />\r\n        </NavigationContainer>\r\n      </PaperProvider>\r\n    </PreferencesContext.Provider>\r\n  );\r\n}\r\nlet deferredPrompt;\r\nwindow.addEventListener('beforeinstallprompt', e => {\r\n  // Prevent the mini-infobar from appearing on mobile\r\n  e.preventDefault();\r\n  // Stash the event so it can be triggered later.\r\n  deferredPrompt = e;\r\n  // Update UI notify the user they can install the PWA\r\n  showInstallPromotion();\r\n  // Optionally, send analytics event that PWA install promo was shown.\r\n  console.log(`'beforeinstallprompt' event was fired.`);\r\n});\r\nserviceWorkerRegistration.register();\r\n\r\nexport default App;\r\n"],"sourceRoot":""}